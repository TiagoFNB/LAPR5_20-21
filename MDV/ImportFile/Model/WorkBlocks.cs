using DDDNetCore.WorkBlocks.Dto;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace DDDNetCore.ImportFile.Model
{



    public class WorkBlockModel {  // used this class to associate the workblock dto needed for the workblock service to create the new workblock
        // and the key of the file, needed to assosiate that workblock with vehicle duties from the file

        public string key { get; set; }
        public WorkBlockGeneratorDto workBlockDTO { get; set; }

        public string driverDutyCode { get; set; }

        public string automaticGeneratedKeyWhenWrockBlockIsRegistered { get; set; }

        public WorkBlockModel (string key, WorkBlockGeneratorDto wb){
            this.key = key;
            this.workBlockDTO = wb;


            }

        public void defineDriverDutyCode(string ddCode)
        {
            this.driverDutyCode = ddCode;
        }

        public void defineAutoGeneratedKey(string k)
        {
            automaticGeneratedKeyWhenWrockBlockIsRegistered = k;
        }
    }



    public class WorkBlocksModel
    {

        public List<WorkBlockModel> workBlocksList { get; set; }
        
        public List<string> errors { get; set; }
        public int WorkBlocksInFile { get; set; }

        public int numberOfWorkBlocksImported { get; set; }
        public WorkBlocksModel() {


            workBlocksList =  new List<WorkBlockModel>();
           
            errors = new List<string>();
            numberOfWorkBlocksImported = 0;
            WorkBlocksInFile = 0;
        }

        public void addWorkBlock(string key, string StartTime, string EndTime, List<string> Trips)
        {
            int StartTimeInt;
            int EndTimeInt;
            int Duration;
            try
            {
                Boolean v1 = Int32.TryParse(StartTime, out StartTimeInt);
                Boolean v2 = Int32.TryParse(EndTime, out EndTimeInt);

                Duration = (EndTimeInt - StartTimeInt);

                DateTime Date = DateTime.Today.AddSeconds(StartTimeInt);

                string DateString = Date.ToString("dd/MM/yyyy HH:mm:ss");

                if (key == null||key=="")
                {
                    errors.Add("There is a workBlock without a key");
                }
                else
                {

               
                
                if(v1 && v2)
                {

             
                if (EndTimeInt - StartTimeInt < 0)
                {
                    errors.Add("work block: " + key + " duration is negative");
                }
                else
                {
                   
                    WorkBlockGeneratorDto d = new WorkBlockGeneratorDto(1, (uint)Duration, DateString, null, Trips);
                    WorkBlockModel wb = new WorkBlockModel(key, d);

                    workBlocksList.Add(wb);
                  
                }
                }
                else
                {
                    errors.Add("Work block: " + key + " start time and/or end time is not a number, error:");
                }

            }
            }
            catch (FormatException e)
            {
                errors.Add("Work block: " + key + " start time and/or end time is not a number, error:" + e);
                
            }
            

        }
        

        

    }




    }
